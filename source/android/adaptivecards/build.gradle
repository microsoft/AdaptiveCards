plugins {
    id 'io.codearte.nexus-staging' version '0.30.0'
}
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -fexceptions -frtti -DNO_LOCALE_SUPPORT"
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

def projectInfo = {
    name = 'Android Adaptive Cards Library'
    description = 'Android Adaptive Cards Lib'
    url = 'https://github.com/Microsoft/AdaptiveCards'
    packaging = 'aar'

    scm {
        url = 'https://github.com/Microsoft/AdaptiveCards'
    }

    licenses {
        license {
            name = 'Adaptive Cards Binary EULA'
            url = 'https://github.com/microsoft/AdaptiveCards/blob/main/source/EULA-Non-Windows.txt'
            distribution = 'repo'
        }
    }

    developers {
        developer {
            id = "microsoft"
            name = "adaptivecards"
        }
    }

    organization {
        name = 'Microsoft'
        url = 'https://microsoft.com/'
    }
}

def releasePublication = {
    from components.release

    groupId = 'io.adaptivecards'
    artifactId = 'adaptivecards-android'

    version = "${acVersion}"

    // If fully specified version given, use that
    if(Boolean.valueOf(System.getenv('AC_FULL_VERSION_SPECIFIED')) && System.getenv('AC_VERSION_STRING')) {
        version = "${System.getenv('AC_VERSION_STRING')}"
    } else {
        // Append pre-release tag/suffix
        if(System.getenv('AC_PRERELEASE_TAG')) {
            version += "-${System.getenv('AC_PRERELEASE_TAG')}"
        }

        // Append pipeline build number, if AC_APPEND_BUILD_NUMBER is true
        if(Boolean.valueOf(System.getenv('AC_APPEND_BUILD_NUMBER')) && System.getenv('BUILD_BUILDNUMBER')) {
            version += ".${System.getenv('BUILD_BUILDNUMBER')}"
        }
    }

    pom projectInfo
}

afterEvaluate {
    publishing {
        publications {
            unsignedRelease(MavenPublication, releasePublication)

            signedRelease(MavenPublication) {
                releasePublication.delegate = it
                releasePublication()
                if(System.getenv('AC_AAR_SIGNATURE_PATH')) {
                    artifact(System.getenv('AC_AAR_SIGNATURE_PATH')) {
                        extension = "aar.asc"
                    }
                }
                if(System.getenv('AC_POM_SIGNATURE_PATH')) {
                    artifact(System.getenv('AC_POM_SIGNATURE_PATH')) {
                        extension = "pom.asc"
                    }
                }
            }
        }

        repositories {
            // Publish to Azure Artifacts feed
            maven {
                name = 'azuredevops'
                url = 'https://microsoft.pkgs.visualstudio.com/_packaging/AdaptiveCards/maven/v1'
                credentials {
                    username "AZURE_ARTIFACTS"
                    password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}"
                }
            }
            // Save to local directory "unsignedArtifact"
            maven {
                name = 'unsignedArtifact'
                url = "unsignedArtifact"
            }
            // Save to local directory "signedArtifact"
            maven {
                name = 'signedArtifact'
                url = "signedArtifact"
            }
            // Publish to Sonatype Nexus OSSRH staging
            maven {
                name = 'sonatypeStaging'
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username "adaptivecards"
                    password System.getenv("AC_SONATYPE_CREDENTIAL") ?: "${NexusPassword}"
                }
            }
        }
    }
}

// TODO: Enable module metadata with signing support
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

nexusStaging {
    username "adaptivecards"
    password System.getenv("AC_SONATYPE_CREDENTIAL") ?: "${NexusPassword}"
    packageGroup 'io.adaptivecards'
    stagingProfileId '9ee8e04fa2eec'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android:flexbox:1.0.0'
    testImplementation 'junit:junit:4.12'
    implementation "androidx.core:core-ktx:1.5.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
