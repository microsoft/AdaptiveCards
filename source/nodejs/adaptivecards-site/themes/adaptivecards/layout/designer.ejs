<%- hashed_asset("node_modules/adaptivecards-designer/dist/adaptivecards-designer.css") %>
<%- hashed_asset("node_modules/adaptivecards/dist/adaptivecards.min.js") %>
<%- hashed_asset("node_modules/adaptive-expressions/lib/browser.js") %>
<%- hashed_asset("node_modules/adaptivecards-templating/dist/adaptivecards-templating.min.js") %>
<%- hashed_asset("node_modules/markdown-it/dist/markdown-it.min.js") %>
<%- hashed_asset("node_modules/adaptivecards-designer/dist/adaptivecards-designer.min.js") %>
<%- hashed_asset('node_modules/monaco-editor/min/vs/loader.js') %>

<style type="text/css">
	.content {
		height: calc(100vh - 97px) !important;
	}

	body {
		font-family: 'Segoe UI', sans-serif;
		font-size: 14px;
	}

	#designerRootHost * {
		box-sizing: border-box;
	}

	.acd-icon-openInNewWindow::before {
		content: "\E8A7";
	}

	.acd-icon-feedback::before {
		content: "\ED15";
	}

	.acd-icon-viewOriginal::before {
		content: "\E7B4";
	}

	.acd-icon-fitPage::before {
		content: "\E9A6";
	}

	.acd-icon-storyboard::before {
		content: "\F308";
	}

	.acd-icon-scopeTemplate::before {
		content: "\F2B0";
	}
</style>


<script type="text/javascript">

	$(function () {

		function getParameterByName(name, url) {
			if (!url) {
				url = window.location.href;
			}

			name = name.replace(/[\[\]]/g, "\\$&");
			var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
			var results = regex.exec(url);

			if (results && results[2]) {
				return decodeURIComponent(results[2].replace(/\+/g, " "));
			} else {
				return "";
			}
		}

		function initializeDesigner() {
			let designer = new ACDesigner.CardDesigner(ACDesigner.defaultMicrosoftHosts);
			designer.assetPath = "<%- config.root %>node_modules/adaptivecards-designer/dist/";
			designer.sampleCatalogueUrl = "<%- config.root %>designer/sample-catalogue.json";
			designer.bindingPreviewMode = ACDesigner.BindingPreviewMode.SampleData;
			
			let hostDocsButton = new ACDesigner.ToolbarButton(
				"hostDocs",
				"Host App Docs",
				"acd-icon-storyboard",
				function () {
					window.open("https://docs.microsoft.com/en-us/adaptive-cards/resources/partners")
				}
			);
			hostDocsButton.separator = false;
			hostDocsButton.toolTip = "Learn more about the Host Apps";
			designer.toolbar.insertElementAfter(hostDocsButton, ACDesigner.CardDesigner.ToolbarCommands.HostAppPicker);

			let templateDocsButton = new ACDesigner.ToolbarButton(
				"templateDocs",
				"Templating Docs",
				"acd-icon-scopeTemplate",
				function () {
					appInsights.trackEvent({ name: "ViewedTemplatingDocs" }, { Origin: "Designer" });
					window.open("https://docs.microsoft.com/en-us/adaptive-cards/templating/");
				}
			);
			templateDocsButton.separator = false;
			templateDocsButton.toolTip = "Learn more about Adaptive Cards templating";
			designer.toolbar.insertElementAfter(templateDocsButton, "hostDocs");

			designer.toolbar.getElementById(ACDesigner.CardDesigner.ToolbarCommands.HostAppPicker).width = "auto";

			let feedbackButton = new ACDesigner.ToolbarButton(
				"feedbackButton",
				"Feedback",
				"acd-icon-feedback",
				function () {
					window.open("https://github.com/Microsoft/AdaptiveCards/issues/new?title="
						+ encodeURIComponent("[Designer] Feedback title here")
						+ "&labels=" + encodeURIComponent("Bug,Triage-Needed,Area-Designer")
						+ "&template=" + encodeURIComponent("designer-bug-report.md"))
				}
			);

			feedbackButton.separator = true;
			feedbackButton.displayCaption = false;
			feedbackButton.alignment = ACDesigner.ToolbarElementAlignment.Right;
			feedbackButton.toolTip = "Provide feedback about the Designer";
			designer.toolbar.addElement(feedbackButton);

			designer.attachTo(document.getElementById("designerRootHost"));
			designer.monacoModuleLoaded();

			var cardUrl = getParameterByName("card", null);
			var dataUrl = getParameterByName("data", null);

			if (dataUrl) {
				var dataXhttp = new XMLHttpRequest();
				dataXhttp.onload = function () {
					if (dataXhttp.responseText && dataXhttp.responseText != "") {
						var sampleData = JSON.parse(dataXhttp.responseText);
						designer.sampleData = sampleData;
					}
				};

				// TODO: when the designer has an addError API we should log that we failed to load the requested card
				// xhttp.onerror = function() {
				// 	designer.
				// };

				try {
					dataXhttp.open("GET", dataUrl, true);
					dataXhttp.send();
				} catch (e) {
				}
			} else {
				// Add sample data
				let sampleData = {
					"title": "Publish Adaptive Card Schema",
					"description": "Now that we have defined the main rules and features of the format, we need to produce a schema and publish it to GitHub. The schema will be the starting point of our reference documentation.",
					"creator": {
						"name": "Matt Hidinger",
						"profileImage": "https://pbs.twimg.com/profile_images/3647943215/d7f12830b3c17a5a9e4afcc370e3a37e_400x400.jpeg"
					},
					"createdUtc": "2017-02-14T06:08:39Z",
					"viewUrl": "https://adaptivecards.io",
					"properties": [
						{ "key": "Board", "value": "Adaptive Cards" },
						{ "key": "List", "value": "Backlog" },
						{ "key": "Assigned to", "value": "Matt Hidinger" },
						{ "key": "Due date", "value": "Not set" }
					]
				};

				designer.sampleData = sampleData;
			}

			if (cardUrl) {
				var cardXhttp = new XMLHttpRequest();
				cardXhttp.onload = function () {
					if (cardXhttp.responseText && cardXhttp.responseText != "") {
						designer.setCard(JSON.parse(cardXhttp.responseText));
					}

					// TODO: Talk to David: I want to put the sampleData setter here but it was failing

					history.replaceState(null, null, "<%- config.root %>designer");
				};

				// TODO: when the designer has an addError API we should log that we failed to load the requested card
				// xhttp.onerror = function() {
				// 	designer.
				// };

				try {
					cardXhttp.open("GET", cardUrl, true);
					cardXhttp.send();
				} catch (e) {
				}
			} else {
				designer.setCard({
					"type": "AdaptiveCard",
					"body": [{
							"type": "TextBlock",
							"size": "Medium",
							"weight": "Bolder",
							"text": "${title}"
						},
						{
							"type": "ColumnSet",
							"columns": [
								{
									"type": "Column",
									"items": [
										{
											"type": "Image",
											"style": "Person",
											"url": "${creator.profileImage}",
											"size": "Small"
										}
									],
									"width": "auto"
								},
								{
									"type": "Column",
									"items": [
										{
											"type": "TextBlock",
											"weight": "Bolder",
											"text": "${creator.name}",
											"wrap": true
										},
										{
											"type": "TextBlock",
											"spacing": "None",
											"text": "Created {{DATE(${createdUtc},SHORT)}}",
											"isSubtle": true,
											"wrap": true
										}
									],
									"width": "stretch"
								}
							]
						},
						{
							"type": "TextBlock",
							"text": "${description}",
							"wrap": true
						},
						{
							"type": "FactSet",
							"facts": [
								{
									"$data": "${properties}",
									"title": "${key}:",
									"value": "${value}"
								}
							]
						}
					],
					"actions": [
						{
							"type": "Action.ShowCard",
							"title": "Set due date",
							"card": {
								"type": "AdaptiveCard",
								"body": [
									{
										"type": "Input.Date",
										"id": "dueDate"
									},
									{
										"type": "Input.Text",
										"id": "comment",
										"placeholder": "Add a comment",
										"isMultiline": true
									}
								],
								"actions": [
									{
										"type": "Action.Submit",
										"title": "OK"
									}
								],
								"$schema": "http://adaptivecards.io/schemas/adaptive-card.json"
							}
						},
						{
							"type": "Action.OpenUrl",
							"title": "View",
							"url": "${viewUrl}"
						}
					],
					"$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
					"version": "1.0"
				});
			}
		}

		if (!ACDesigner.SettingsManager.isLocalStorageAvailable) {
			console.log("Local storage is not available.");
		}

		ACDesigner.GlobalSettings.enableDataBindingSupport = true;
		ACDesigner.GlobalSettings.showDataStructureToolbox = false;
		ACDesigner.GlobalSettings.showSampleDataEditorToolbox = true;
		ACDesigner.GlobalSettings.showVersionPicker = true;
		
		<% if (page.previewFeaturesEnabled) { %>

        <% } %>
        

        if (getParameterByName("preview") === "1") {
       
        }

		require.config({
			paths: {
				'vs': '<%- config.root %>node_modules/monaco-editor/min/vs'
			}
		});
		require(['vs/editor/editor.main'], function () {
			// Override the designer schema validation to enable syntax highlighting
			// TODO: Find a way to also validate against the schema
			monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
				validate: true
			});

			initializeDesigner();
		});
	});
</script>

<div style="display: flex; flex-direction: column; height: 100%; ">
	<div id="designerRootHost"></div>
</div>
