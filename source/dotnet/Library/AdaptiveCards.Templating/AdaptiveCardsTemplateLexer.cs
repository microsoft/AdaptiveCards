//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdaptiveCardsTemplateLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AdaptiveCardsTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TEMPLATELITERAL=1, COMMA=2, COLON=3, LCB=4, RCB=5, LSB=6, RSB=7, TRUE=8, 
		FALSE=9, NULL=10, StringDeclOpen=11, NUMBER=12, WS=13, CLOSE=14, TEMPLATEDATA=15, 
		TEMPLATEWHEN=16, STRING=17, SINGLE=18, DOUBLE=19, TSTM=20, TemplateStart=21;
	public const int
		INSIDE=1, TemplateString=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "INSIDE", "TemplateString"
	};

	public static readonly string[] ruleNames = {
		"COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", "TRUE", "FALSE", "NULL", 
		"StringDeclOpen", "NUMBER", "INT", "EXP", "WS", "CLOSE", "TEMPLATEDATA", 
		"TEMPLATEWHEN", "TemplateStart", "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", 
		"TRCB", "TEXT", "SINGLE", "DOUBLE", "TSTM"
	};


	public AdaptiveCardsTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AdaptiveCardsTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "','", "':'", "'{'", "'}'", "'['", "']'", "'true'", "'false'", 
		"'null'", null, null, null, null, "'$data'", "'$when'", null, null, null, 
		null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TEMPLATELITERAL", "COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", 
		"TRUE", "FALSE", "NULL", "StringDeclOpen", "NUMBER", "WS", "CLOSE", "TEMPLATEDATA", 
		"TEMPLATEWHEN", "STRING", "SINGLE", "DOUBLE", "TSTM", "TemplateStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdaptiveCardsTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AdaptiveCardsTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,21,219,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,3,10,
		93,8,10,1,10,1,10,1,10,4,10,98,8,10,11,10,12,10,99,3,10,102,8,10,1,10,
		3,10,105,8,10,1,11,1,11,1,11,5,11,110,8,11,10,11,12,11,113,9,11,3,11,115,
		8,11,1,12,1,12,3,12,119,8,12,1,12,1,12,1,13,4,13,124,8,13,11,13,12,13,
		125,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,4,18,154,
		8,18,11,18,12,18,155,1,18,3,18,159,8,18,1,19,1,19,1,19,3,19,164,8,19,1,
		20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,
		23,1,24,1,24,1,24,1,24,3,24,185,8,24,1,24,1,24,1,25,1,25,5,25,191,8,25,
		10,25,12,25,194,9,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,202,8,26,10,26,
		12,26,205,9,26,1,26,1,26,1,26,1,27,1,27,1,27,5,27,213,8,27,10,27,12,27,
		216,9,27,1,27,1,27,3,192,203,214,0,28,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,0,27,0,29,13,31,14,33,15,35,16,37,21,39,17,41,0,
		43,0,45,0,47,0,49,0,51,0,53,18,55,19,57,20,3,0,1,2,8,1,0,48,57,1,0,49,
		57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,32,32,8,0,34,34,47,
		47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,
		4,0,0,31,34,34,36,36,92,92,229,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,1,33,1,0,0,0,1,35,
		1,0,0,0,1,37,1,0,0,0,1,39,1,0,0,0,2,49,1,0,0,0,2,51,1,0,0,0,2,53,1,0,0,
		0,2,55,1,0,0,0,2,57,1,0,0,0,3,59,1,0,0,0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,
		1,0,0,0,11,67,1,0,0,0,13,69,1,0,0,0,15,71,1,0,0,0,17,76,1,0,0,0,19,82,
		1,0,0,0,21,87,1,0,0,0,23,92,1,0,0,0,25,114,1,0,0,0,27,116,1,0,0,0,29,123,
		1,0,0,0,31,129,1,0,0,0,33,133,1,0,0,0,35,139,1,0,0,0,37,145,1,0,0,0,39,
		158,1,0,0,0,41,160,1,0,0,0,43,165,1,0,0,0,45,171,1,0,0,0,47,173,1,0,0,
		0,49,175,1,0,0,0,51,184,1,0,0,0,53,188,1,0,0,0,55,197,1,0,0,0,57,209,1,
		0,0,0,59,60,5,44,0,0,60,4,1,0,0,0,61,62,5,58,0,0,62,6,1,0,0,0,63,64,5,
		123,0,0,64,8,1,0,0,0,65,66,5,125,0,0,66,10,1,0,0,0,67,68,5,91,0,0,68,12,
		1,0,0,0,69,70,5,93,0,0,70,14,1,0,0,0,71,72,5,116,0,0,72,73,5,114,0,0,73,
		74,5,117,0,0,74,75,5,101,0,0,75,16,1,0,0,0,76,77,5,102,0,0,77,78,5,97,
		0,0,78,79,5,108,0,0,79,80,5,115,0,0,80,81,5,101,0,0,81,18,1,0,0,0,82,83,
		5,110,0,0,83,84,5,117,0,0,84,85,5,108,0,0,85,86,5,108,0,0,86,20,1,0,0,
		0,87,88,5,34,0,0,88,89,1,0,0,0,89,90,6,9,0,0,90,22,1,0,0,0,91,93,5,45,
		0,0,92,91,1,0,0,0,92,93,1,0,0,0,93,94,1,0,0,0,94,101,3,25,11,0,95,97,5,
		46,0,0,96,98,7,0,0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,
		1,0,0,0,100,102,1,0,0,0,101,95,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,
		103,105,3,27,12,0,104,103,1,0,0,0,104,105,1,0,0,0,105,24,1,0,0,0,106,115,
		5,48,0,0,107,111,7,1,0,0,108,110,7,0,0,0,109,108,1,0,0,0,110,113,1,0,0,
		0,111,109,1,0,0,0,111,112,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,114,
		106,1,0,0,0,114,107,1,0,0,0,115,26,1,0,0,0,116,118,7,2,0,0,117,119,7,3,
		0,0,118,117,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,121,3,25,11,0,
		121,28,1,0,0,0,122,124,7,4,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,
		1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,6,13,1,0,128,30,1,0,0,
		0,129,130,5,34,0,0,130,131,1,0,0,0,131,132,6,14,2,0,132,32,1,0,0,0,133,
		134,5,36,0,0,134,135,5,100,0,0,135,136,5,97,0,0,136,137,5,116,0,0,137,
		138,5,97,0,0,138,34,1,0,0,0,139,140,5,36,0,0,140,141,5,119,0,0,141,142,
		5,104,0,0,142,143,5,101,0,0,143,144,5,110,0,0,144,36,1,0,0,0,145,146,5,
		36,0,0,146,147,5,123,0,0,147,148,1,0,0,0,148,149,6,17,3,0,149,150,6,17,
		4,0,150,38,1,0,0,0,151,154,3,41,19,0,152,154,3,47,22,0,153,151,1,0,0,0,
		153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,159,
		1,0,0,0,157,159,5,36,0,0,158,153,1,0,0,0,158,157,1,0,0,0,159,40,1,0,0,
		0,160,163,5,92,0,0,161,164,7,5,0,0,162,164,3,43,20,0,163,161,1,0,0,0,163,
		162,1,0,0,0,164,42,1,0,0,0,165,166,5,117,0,0,166,167,3,45,21,0,167,168,
		3,45,21,0,168,169,3,45,21,0,169,170,3,45,21,0,170,44,1,0,0,0,171,172,7,
		6,0,0,172,46,1,0,0,0,173,174,8,7,0,0,174,48,1,0,0,0,175,176,3,9,3,0,176,
		177,1,0,0,0,177,178,6,23,2,0,178,179,6,23,5,0,179,50,1,0,0,0,180,185,3,
		53,25,0,181,185,3,55,26,0,182,185,3,57,27,0,183,185,9,0,0,0,184,180,1,
		0,0,0,184,181,1,0,0,0,184,182,1,0,0,0,184,183,1,0,0,0,185,186,1,0,0,0,
		186,187,6,24,4,0,187,52,1,0,0,0,188,192,5,39,0,0,189,191,9,0,0,0,190,189,
		1,0,0,0,191,194,1,0,0,0,192,193,1,0,0,0,192,190,1,0,0,0,193,195,1,0,0,
		0,194,192,1,0,0,0,195,196,5,39,0,0,196,54,1,0,0,0,197,198,5,92,0,0,198,
		199,5,34,0,0,199,203,1,0,0,0,200,202,9,0,0,0,201,200,1,0,0,0,202,205,1,
		0,0,0,203,204,1,0,0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,
		206,207,5,92,0,0,207,208,5,34,0,0,208,56,1,0,0,0,209,214,3,7,2,0,210,213,
		3,57,27,0,211,213,9,0,0,0,212,210,1,0,0,0,212,211,1,0,0,0,213,216,1,0,
		0,0,214,215,1,0,0,0,214,212,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,
		218,3,9,3,0,218,58,1,0,0,0,20,0,1,2,92,99,101,104,111,114,118,125,153,
		155,158,163,184,192,203,212,214,6,5,1,0,6,0,0,4,0,0,5,2,0,3,0,0,7,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
