//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdaptiveCardsTemplateLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AdaptiveCardsTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMA=1, COLON=2, LCB=3, RCB=4, LSB=5, RSB=6, TRUE=7, FALSE=8, NULL=9, 
		StringDeclOpen=10, NUMBER=11, WS=12, CLOSE=13, TEMPLATEDATA=14, TEMPLATEWHEN=15, 
		JPATH=16, TEMPLATELITERAL=17, TEMPLATEROOT=18, STRING=19;
	public const int
		INSIDE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "INSIDE"
	};

	public static readonly string[] ruleNames = {
		"COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", "TRUE", "FALSE", "NULL", 
		"StringDeclOpen", "NUMBER", "INT", "EXP", "WS", "CLOSE", "TEMPLATEDATA", 
		"TEMPLATEWHEN", "JPATH", "TEMPLATELITERAL", "TEMPLATEROOT", "STRING", 
		"ESC", "UNICODE", "HEX", "SAFECODEPOINT"
	};


	public AdaptiveCardsTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AdaptiveCardsTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'{'", "'}'", "'['", "']'", "'true'", "'false'", "'null'", 
		null, null, null, null, "'$data'", "'$when'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", "TRUE", "FALSE", "NULL", 
		"StringDeclOpen", "NUMBER", "WS", "CLOSE", "TEMPLATEDATA", "TEMPLATEWHEN", 
		"JPATH", "TEMPLATELITERAL", "TEMPLATEROOT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdaptiveCardsTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AdaptiveCardsTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,196,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
		3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,3,10,86,8,10,1,10,1,10,1,10,4,10,91,8,
		10,11,10,12,10,92,3,10,95,8,10,1,10,3,10,98,8,10,1,11,1,11,1,11,5,11,103,
		8,11,10,11,12,11,106,9,11,3,11,108,8,11,1,12,1,12,3,12,112,8,12,1,12,1,
		12,1,13,4,13,117,8,13,11,13,12,13,118,1,13,1,13,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
		17,1,17,1,17,1,17,4,17,145,8,17,11,17,12,17,146,1,17,1,17,1,18,1,18,1,
		18,1,18,1,18,5,18,156,8,18,10,18,12,18,159,9,18,1,18,1,18,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,4,20,175,8,20,11,20,12,
		20,176,1,20,3,20,180,8,20,1,21,1,21,1,21,3,21,185,8,21,1,22,1,22,1,22,
		1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,157,0,25,2,1,4,2,6,3,8,4,10,5,12,
		6,14,7,16,8,18,9,20,10,22,11,24,0,26,0,28,12,30,13,32,14,34,15,36,16,38,
		17,40,18,42,19,44,0,46,0,48,0,50,0,2,0,1,9,1,0,48,57,1,0,49,57,2,0,69,
		69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,32,32,1,0,34,34,8,0,34,34,47,
		47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,
		4,0,0,31,34,34,36,36,92,92,204,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,
		1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,
		0,0,20,1,0,0,0,0,22,1,0,0,0,0,28,1,0,0,0,1,30,1,0,0,0,1,32,1,0,0,0,1,34,
		1,0,0,0,1,36,1,0,0,0,1,38,1,0,0,0,1,40,1,0,0,0,1,42,1,0,0,0,2,52,1,0,0,
		0,4,54,1,0,0,0,6,56,1,0,0,0,8,58,1,0,0,0,10,60,1,0,0,0,12,62,1,0,0,0,14,
		64,1,0,0,0,16,69,1,0,0,0,18,75,1,0,0,0,20,80,1,0,0,0,22,85,1,0,0,0,24,
		107,1,0,0,0,26,109,1,0,0,0,28,116,1,0,0,0,30,122,1,0,0,0,32,126,1,0,0,
		0,34,132,1,0,0,0,36,144,1,0,0,0,38,150,1,0,0,0,40,162,1,0,0,0,42,179,1,
		0,0,0,44,181,1,0,0,0,46,186,1,0,0,0,48,192,1,0,0,0,50,194,1,0,0,0,52,53,
		5,44,0,0,53,3,1,0,0,0,54,55,5,58,0,0,55,5,1,0,0,0,56,57,5,123,0,0,57,7,
		1,0,0,0,58,59,5,125,0,0,59,9,1,0,0,0,60,61,5,91,0,0,61,11,1,0,0,0,62,63,
		5,93,0,0,63,13,1,0,0,0,64,65,5,116,0,0,65,66,5,114,0,0,66,67,5,117,0,0,
		67,68,5,101,0,0,68,15,1,0,0,0,69,70,5,102,0,0,70,71,5,97,0,0,71,72,5,108,
		0,0,72,73,5,115,0,0,73,74,5,101,0,0,74,17,1,0,0,0,75,76,5,110,0,0,76,77,
		5,117,0,0,77,78,5,108,0,0,78,79,5,108,0,0,79,19,1,0,0,0,80,81,5,34,0,0,
		81,82,1,0,0,0,82,83,6,9,0,0,83,21,1,0,0,0,84,86,5,45,0,0,85,84,1,0,0,0,
		85,86,1,0,0,0,86,87,1,0,0,0,87,94,3,24,11,0,88,90,5,46,0,0,89,91,7,0,0,
		0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,
		0,94,88,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,98,3,26,12,0,97,96,1,0,
		0,0,97,98,1,0,0,0,98,23,1,0,0,0,99,108,5,48,0,0,100,104,7,1,0,0,101,103,
		7,0,0,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,
		0,105,108,1,0,0,0,106,104,1,0,0,0,107,99,1,0,0,0,107,100,1,0,0,0,108,25,
		1,0,0,0,109,111,7,2,0,0,110,112,7,3,0,0,111,110,1,0,0,0,111,112,1,0,0,
		0,112,113,1,0,0,0,113,114,3,24,11,0,114,27,1,0,0,0,115,117,7,4,0,0,116,
		115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,120,1,
		0,0,0,120,121,6,13,1,0,121,29,1,0,0,0,122,123,5,34,0,0,123,124,1,0,0,0,
		124,125,6,14,2,0,125,31,1,0,0,0,126,127,5,36,0,0,127,128,5,100,0,0,128,
		129,5,97,0,0,129,130,5,116,0,0,130,131,5,97,0,0,131,33,1,0,0,0,132,133,
		5,36,0,0,133,134,5,119,0,0,134,135,5,104,0,0,135,136,5,101,0,0,136,137,
		5,110,0,0,137,35,1,0,0,0,138,139,5,46,0,0,139,145,3,42,20,0,140,141,5,
		91,0,0,141,142,3,24,11,0,142,143,5,93,0,0,143,145,1,0,0,0,144,138,1,0,
		0,0,144,140,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,
		148,1,0,0,0,148,149,5,125,0,0,149,37,1,0,0,0,150,151,5,36,0,0,151,152,
		5,123,0,0,152,157,1,0,0,0,153,156,8,5,0,0,154,156,3,44,21,0,155,153,1,
		0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,158,1,0,0,0,157,155,1,0,0,0,
		158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,125,0,0,161,39,1,0,0,0,162,163,
		5,36,0,0,163,164,5,123,0,0,164,165,5,36,0,0,165,166,5,114,0,0,166,167,
		5,111,0,0,167,168,5,111,0,0,168,169,5,116,0,0,169,170,1,0,0,0,170,171,
		3,36,17,0,171,41,1,0,0,0,172,175,3,44,21,0,173,175,3,50,24,0,174,172,1,
		0,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,
		177,180,1,0,0,0,178,180,5,36,0,0,179,174,1,0,0,0,179,178,1,0,0,0,180,43,
		1,0,0,0,181,184,5,92,0,0,182,185,7,6,0,0,183,185,3,46,22,0,184,182,1,0,
		0,0,184,183,1,0,0,0,185,45,1,0,0,0,186,187,5,117,0,0,187,188,3,48,23,0,
		188,189,3,48,23,0,189,190,3,48,23,0,190,191,3,48,23,0,191,47,1,0,0,0,192,
		193,7,7,0,0,193,49,1,0,0,0,194,195,8,8,0,0,195,51,1,0,0,0,18,0,1,85,92,
		94,97,104,107,111,118,144,146,155,157,174,176,179,184,3,5,1,0,6,0,0,4,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
