//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdaptiveCardsTemplateLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AdaptiveCardsTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TEMPLATELITERAL=1, COMMA=2, COLON=3, LCB=4, RCB=5, LSB=6, RSB=7, TRUE=8, 
		FALSE=9, NULL=10, StringDeclOpen=11, NUMBER=12, WS=13, CLOSE=14, TEMPLATEDATA=15, 
		TEMPLATEWHEN=16, JPATH=17, TEMPLATEROOT=18, STRING=19, SINGLE=20, DOUBLE=21, 
		TSTM=22, TemplateStart=23;
	public const int
		INSIDE=1, TemplateString=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "INSIDE", "TemplateString"
	};

	public static readonly string[] ruleNames = {
		"COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", "TRUE", "FALSE", "NULL", 
		"StringDeclOpen", "NUMBER", "INT", "EXP", "WS", "CLOSE", "TEMPLATEDATA", 
		"TEMPLATEWHEN", "JPATH", "TemplateStart", "TEMPLATEROOT", "STRING", "ESC", 
		"UNICODE", "HEX", "SAFECODEPOINT", "TRCB", "TEXT", "SINGLE", "DOUBLE", 
		"TSTM"
	};


	public AdaptiveCardsTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AdaptiveCardsTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "','", "':'", "'{'", "'}'", "'['", "']'", "'true'", "'false'", 
		"'null'", null, null, null, null, "'$data'", "'$when'", null, null, null, 
		null, null, null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TEMPLATELITERAL", "COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", 
		"TRUE", "FALSE", "NULL", "StringDeclOpen", "NUMBER", "WS", "CLOSE", "TEMPLATEDATA", 
		"TEMPLATEWHEN", "JPATH", "TEMPLATEROOT", "STRING", "SINGLE", "DOUBLE", 
		"TSTM", "TemplateStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdaptiveCardsTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AdaptiveCardsTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,245,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,10,3,10,97,8,10,1,10,1,10,1,10,4,10,102,8,10,11,10,12,10,
		103,3,10,106,8,10,1,10,3,10,109,8,10,1,11,1,11,1,11,5,11,114,8,11,10,11,
		12,11,117,9,11,3,11,119,8,11,1,12,1,12,3,12,123,8,12,1,12,1,12,1,13,4,
		13,128,8,13,11,13,12,13,129,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
		17,1,17,4,17,156,8,17,11,17,12,17,157,1,17,1,17,1,18,1,18,1,18,1,18,1,
		18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,4,
		20,180,8,20,11,20,12,20,181,1,20,3,20,185,8,20,1,21,1,21,1,21,3,21,190,
		8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,
		1,25,1,25,1,26,1,26,1,26,1,26,3,26,211,8,26,1,26,1,26,1,27,1,27,5,27,217,
		8,27,10,27,12,27,220,9,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,228,8,28,
		10,28,12,28,231,9,28,1,28,1,28,1,28,1,29,1,29,1,29,5,29,239,8,29,10,29,
		12,29,242,9,29,1,29,1,29,3,218,229,240,0,30,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,0,27,0,29,13,31,14,33,15,35,16,37,17,39,
		23,41,18,43,19,45,0,47,0,49,0,51,0,53,0,55,0,57,20,59,21,61,22,3,0,1,2,
		8,1,0,48,57,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,
		32,32,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,
		48,57,65,70,97,102,4,0,0,31,34,34,36,36,92,92,257,0,3,1,0,0,0,0,5,1,0,
		0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,
		0,1,33,1,0,0,0,1,35,1,0,0,0,1,37,1,0,0,0,1,39,1,0,0,0,1,41,1,0,0,0,1,43,
		1,0,0,0,2,53,1,0,0,0,2,55,1,0,0,0,2,57,1,0,0,0,2,59,1,0,0,0,2,61,1,0,0,
		0,3,63,1,0,0,0,5,65,1,0,0,0,7,67,1,0,0,0,9,69,1,0,0,0,11,71,1,0,0,0,13,
		73,1,0,0,0,15,75,1,0,0,0,17,80,1,0,0,0,19,86,1,0,0,0,21,91,1,0,0,0,23,
		96,1,0,0,0,25,118,1,0,0,0,27,120,1,0,0,0,29,127,1,0,0,0,31,133,1,0,0,0,
		33,137,1,0,0,0,35,143,1,0,0,0,37,155,1,0,0,0,39,161,1,0,0,0,41,167,1,0,
		0,0,43,184,1,0,0,0,45,186,1,0,0,0,47,191,1,0,0,0,49,197,1,0,0,0,51,199,
		1,0,0,0,53,201,1,0,0,0,55,210,1,0,0,0,57,214,1,0,0,0,59,223,1,0,0,0,61,
		235,1,0,0,0,63,64,5,44,0,0,64,4,1,0,0,0,65,66,5,58,0,0,66,6,1,0,0,0,67,
		68,5,123,0,0,68,8,1,0,0,0,69,70,5,125,0,0,70,10,1,0,0,0,71,72,5,91,0,0,
		72,12,1,0,0,0,73,74,5,93,0,0,74,14,1,0,0,0,75,76,5,116,0,0,76,77,5,114,
		0,0,77,78,5,117,0,0,78,79,5,101,0,0,79,16,1,0,0,0,80,81,5,102,0,0,81,82,
		5,97,0,0,82,83,5,108,0,0,83,84,5,115,0,0,84,85,5,101,0,0,85,18,1,0,0,0,
		86,87,5,110,0,0,87,88,5,117,0,0,88,89,5,108,0,0,89,90,5,108,0,0,90,20,
		1,0,0,0,91,92,5,34,0,0,92,93,1,0,0,0,93,94,6,9,0,0,94,22,1,0,0,0,95,97,
		5,45,0,0,96,95,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,105,3,25,11,0,99,
		101,5,46,0,0,100,102,7,0,0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,
		0,0,0,103,104,1,0,0,0,104,106,1,0,0,0,105,99,1,0,0,0,105,106,1,0,0,0,106,
		108,1,0,0,0,107,109,3,27,12,0,108,107,1,0,0,0,108,109,1,0,0,0,109,24,1,
		0,0,0,110,119,5,48,0,0,111,115,7,1,0,0,112,114,7,0,0,0,113,112,1,0,0,0,
		114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,119,1,0,0,0,117,115,
		1,0,0,0,118,110,1,0,0,0,118,111,1,0,0,0,119,26,1,0,0,0,120,122,7,2,0,0,
		121,123,7,3,0,0,122,121,1,0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,125,
		3,25,11,0,125,28,1,0,0,0,126,128,7,4,0,0,127,126,1,0,0,0,128,129,1,0,0,
		0,129,127,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,6,13,1,0,132,
		30,1,0,0,0,133,134,5,34,0,0,134,135,1,0,0,0,135,136,6,14,2,0,136,32,1,
		0,0,0,137,138,5,36,0,0,138,139,5,100,0,0,139,140,5,97,0,0,140,141,5,116,
		0,0,141,142,5,97,0,0,142,34,1,0,0,0,143,144,5,36,0,0,144,145,5,119,0,0,
		145,146,5,104,0,0,146,147,5,101,0,0,147,148,5,110,0,0,148,36,1,0,0,0,149,
		150,5,46,0,0,150,156,3,43,20,0,151,152,5,91,0,0,152,153,3,25,11,0,153,
		154,5,93,0,0,154,156,1,0,0,0,155,149,1,0,0,0,155,151,1,0,0,0,156,157,1,
		0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,5,125,0,
		0,160,38,1,0,0,0,161,162,5,36,0,0,162,163,5,123,0,0,163,164,1,0,0,0,164,
		165,6,18,3,0,165,166,6,18,4,0,166,40,1,0,0,0,167,168,5,36,0,0,168,169,
		5,123,0,0,169,170,5,36,0,0,170,171,5,114,0,0,171,172,5,111,0,0,172,173,
		5,111,0,0,173,174,5,116,0,0,174,175,1,0,0,0,175,176,3,37,17,0,176,42,1,
		0,0,0,177,180,3,45,21,0,178,180,3,51,24,0,179,177,1,0,0,0,179,178,1,0,
		0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,185,1,0,0,0,183,
		185,5,36,0,0,184,179,1,0,0,0,184,183,1,0,0,0,185,44,1,0,0,0,186,189,5,
		92,0,0,187,190,7,5,0,0,188,190,3,47,22,0,189,187,1,0,0,0,189,188,1,0,0,
		0,190,46,1,0,0,0,191,192,5,117,0,0,192,193,3,49,23,0,193,194,3,49,23,0,
		194,195,3,49,23,0,195,196,3,49,23,0,196,48,1,0,0,0,197,198,7,6,0,0,198,
		50,1,0,0,0,199,200,8,7,0,0,200,52,1,0,0,0,201,202,3,9,3,0,202,203,1,0,
		0,0,203,204,6,25,2,0,204,205,6,25,5,0,205,54,1,0,0,0,206,211,3,57,27,0,
		207,211,3,59,28,0,208,211,3,61,29,0,209,211,9,0,0,0,210,206,1,0,0,0,210,
		207,1,0,0,0,210,208,1,0,0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,213,6,
		26,4,0,213,56,1,0,0,0,214,218,5,39,0,0,215,217,9,0,0,0,216,215,1,0,0,0,
		217,220,1,0,0,0,218,219,1,0,0,0,218,216,1,0,0,0,219,221,1,0,0,0,220,218,
		1,0,0,0,221,222,5,39,0,0,222,58,1,0,0,0,223,224,5,92,0,0,224,225,5,34,
		0,0,225,229,1,0,0,0,226,228,9,0,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,
		230,1,0,0,0,229,227,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,233,5,
		92,0,0,233,234,5,34,0,0,234,60,1,0,0,0,235,240,3,7,2,0,236,239,3,61,29,
		0,237,239,9,0,0,0,238,236,1,0,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,
		241,1,0,0,0,240,238,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,3,
		9,3,0,244,62,1,0,0,0,22,0,1,2,96,103,105,108,115,118,122,129,155,157,179,
		181,184,189,210,218,229,238,240,6,5,1,0,6,0,0,4,0,0,5,2,0,3,0,0,7,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
