//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdaptiveCardsTemplateParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AdaptiveCardsTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMA=1, COLON=2, LCB=3, RCB=4, LSB=5, RSB=6, TRUE=7, FALSE=8, NULL=9, 
		StringDeclOpen=10, NUMBER=11, WS=12, CLOSE=13, TEMPLATEDATA=14, TEMPLATEWHEN=15, 
		JPATH=16, TEMPLATELITERAL=17, TEMPLATEROOT=18, STRING=19;
	public const int
		RULE_json = 0, RULE_obj = 1, RULE_pair = 2, RULE_array = 3, RULE_value = 4, 
		RULE_templateString = 5, RULE_templateRoot = 6, RULE_templateExpression = 7;
	public static readonly string[] ruleNames = {
		"json", "obj", "pair", "array", "value", "templateString", "templateRoot", 
		"templateExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'{'", "'}'", "'['", "']'", "'true'", "'false'", "'null'", 
		null, null, null, null, "'$data'", "'$when'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", "TRUE", "FALSE", "NULL", 
		"StringDeclOpen", "NUMBER", "WS", "CLOSE", "TEMPLATEDATA", "TEMPLATEWHEN", 
		"JPATH", "TEMPLATELITERAL", "TEMPLATEROOT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdaptiveCardsTemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AdaptiveCardsTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AdaptiveCardsTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AdaptiveCardsTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(AdaptiveCardsTemplateParser.LCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(AdaptiveCardsTemplateParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AdaptiveCardsTemplateParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AdaptiveCardsTemplateParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				Match(LCB);
				State = 19;
				pair();
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 20;
					Match(COMMA);
					State = 21;
					pair();
					}
					}
					State = 26;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 27;
				Match(RCB);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				Match(LCB);
				State = 30;
				Match(RCB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
	 
		public PairContext() { }
		public virtual void CopyFrom(PairContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateWhenContext : PairContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATEWHEN() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATEWHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AdaptiveCardsTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateExpressionContext templateExpression() {
			return GetRuleContext<TemplateExpressionContext>(0);
		}
		public TemplateWhenContext(PairContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonPairContext : PairContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AdaptiveCardsTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AdaptiveCardsTemplateParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AdaptiveCardsTemplateParser.STRING, i);
		}
		public JsonPairContext(PairContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPair(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TemplateDataContext : PairContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATEDATA() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATEDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AdaptiveCardsTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public TemplateDataContext(PairContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TemplateRootDataContext : PairContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringDeclOpen() { return GetTokens(AdaptiveCardsTemplateParser.StringDeclOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen(int i) {
			return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATEDATA() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATEDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(AdaptiveCardsTemplateParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(AdaptiveCardsTemplateParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AdaptiveCardsTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateRootContext templateRoot() {
			return GetRuleContext<TemplateRootContext>(0);
		}
		public TemplateRootDataContext(PairContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateRootData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		int _la;
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new JsonPairContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				Match(StringDeclOpen);
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING) {
					{
					{
					State = 34;
					Match(STRING);
					}
					}
					State = 39;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 40;
				Match(CLOSE);
				State = 41;
				Match(COLON);
				State = 42;
				value();
				}
				break;
			case 2:
				_localctx = new TemplateRootDataContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				Match(StringDeclOpen);
				State = 44;
				Match(TEMPLATEDATA);
				State = 45;
				Match(CLOSE);
				State = 46;
				Match(COLON);
				State = 47;
				Match(StringDeclOpen);
				State = 48;
				templateRoot();
				State = 49;
				Match(CLOSE);
				}
				break;
			case 3:
				_localctx = new TemplateDataContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				Match(StringDeclOpen);
				State = 52;
				Match(TEMPLATEDATA);
				State = 53;
				Match(CLOSE);
				State = 54;
				Match(COLON);
				State = 55;
				value();
				}
				break;
			case 4:
				_localctx = new TemplateWhenContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 56;
				Match(StringDeclOpen);
				State = 57;
				Match(TEMPLATEWHEN);
				State = 58;
				Match(CLOSE);
				State = 59;
				Match(COLON);
				State = 60;
				templateExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSB() { return GetToken(AdaptiveCardsTemplateParser.LSB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSB() { return GetToken(AdaptiveCardsTemplateParser.RSB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AdaptiveCardsTemplateParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AdaptiveCardsTemplateParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 6, RULE_array);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				Match(LSB);
				State = 64;
				value();
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 65;
					Match(COMMA);
					State = 66;
					value();
					}
					}
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 72;
				Match(RSB);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				Match(LSB);
				State = 75;
				Match(RSB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueObjectContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ValueObjectContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNullContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(AdaptiveCardsTemplateParser.NULL, 0); }
		public ValueNullContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTemplateStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringContext[] templateString() {
			return GetRuleContexts<TemplateStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringContext templateString(int i) {
			return GetRuleContext<TemplateStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		public ValueTemplateStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AdaptiveCardsTemplateParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(AdaptiveCardsTemplateParser.TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(AdaptiveCardsTemplateParser.FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AdaptiveCardsTemplateParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AdaptiveCardsTemplateParser.STRING, i);
		}
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTemplateStringWithRootContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateRootContext templateRoot() {
			return GetRuleContext<TemplateRootContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		public ValueTemplateStringWithRootContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTemplateStringWithRoot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueArrayContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueArrayContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new ValueTemplateStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				Match(StringDeclOpen);
				State = 79;
				templateString();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TEMPLATELITERAL || _la==STRING) {
					{
					{
					State = 80;
					templateString();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 86;
				Match(CLOSE);
				}
				break;
			case 2:
				_localctx = new ValueTemplateStringWithRootContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				Match(StringDeclOpen);
				State = 89;
				templateRoot();
				State = 90;
				Match(CLOSE);
				}
				break;
			case 3:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				Match(StringDeclOpen);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING) {
					{
					{
					State = 93;
					Match(STRING);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 99;
				Match(CLOSE);
				}
				break;
			case 4:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 100;
				Match(NUMBER);
				}
				break;
			case 5:
				_localctx = new ValueObjectContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 101;
				obj();
				}
				break;
			case 6:
				_localctx = new ValueArrayContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 102;
				array();
				}
				break;
			case 7:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 103;
				Match(TRUE);
				}
				break;
			case 8:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				Match(FALSE);
				}
				break;
			case 9:
				_localctx = new ValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 105;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringContext : ParserRuleContext {
		public TemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateString; } }
	 
		public TemplateStringContext() { }
		public virtual void CopyFrom(TemplateStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplatedStringContext : TemplateStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATELITERAL() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATELITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AdaptiveCardsTemplateParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AdaptiveCardsTemplateParser.STRING, i);
		}
		public TemplatedStringContext(TemplateStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringContext templateString() {
		TemplateStringContext _localctx = new TemplateStringContext(Context, State);
		EnterRule(_localctx, 10, RULE_templateString);
		int _la;
		try {
			int _alt;
			_localctx = new TemplatedStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING) {
				{
				{
				State = 108;
				Match(STRING);
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			Match(TEMPLATELITERAL);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 115;
					Match(STRING);
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateRootContext : ParserRuleContext {
		public TemplateRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateRoot; } }
	 
		public TemplateRootContext() { }
		public virtual void CopyFrom(TemplateRootContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringWithRootContext : TemplateRootContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATEROOT() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATEROOT, 0); }
		public TemplateStringWithRootContext(TemplateRootContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringWithRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateRootContext templateRoot() {
		TemplateRootContext _localctx = new TemplateRootContext(Context, State);
		EnterRule(_localctx, 12, RULE_templateRoot);
		try {
			_localctx = new TemplateStringWithRootContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(TEMPLATEROOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateExpressionContext : ParserRuleContext {
		public TemplateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateExpression; } }
	 
		public TemplateExpressionContext() { }
		public virtual void CopyFrom(TemplateExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueTemplateExpressionContext : TemplateExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATELITERAL() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATELITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		public ValueTemplateExpressionContext(TemplateExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTemplateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateExpressionContext templateExpression() {
		TemplateExpressionContext _localctx = new TemplateExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_templateExpression);
		try {
			_localctx = new ValueTemplateExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(StringDeclOpen);
			State = 124;
			Match(TEMPLATELITERAL);
			State = 125;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,128,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,1,1,1,1,1,1,1,5,1,23,8,1,10,1,12,1,26,9,1,1,1,1,1,1,1,1,
		1,3,1,32,8,1,1,2,1,2,5,2,36,8,2,10,2,12,2,39,9,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,62,8,
		2,1,3,1,3,1,3,1,3,5,3,68,8,3,10,3,12,3,71,9,3,1,3,1,3,1,3,1,3,3,3,77,8,
		3,1,4,1,4,1,4,5,4,82,8,4,10,4,12,4,85,9,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,5,4,95,8,4,10,4,12,4,98,9,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,107,8,
		4,1,5,5,5,110,8,5,10,5,12,5,113,9,5,1,5,1,5,5,5,117,8,5,10,5,12,5,120,
		9,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,0,139,0,16,
		1,0,0,0,2,31,1,0,0,0,4,61,1,0,0,0,6,76,1,0,0,0,8,106,1,0,0,0,10,111,1,
		0,0,0,12,121,1,0,0,0,14,123,1,0,0,0,16,17,3,8,4,0,17,1,1,0,0,0,18,19,5,
		3,0,0,19,24,3,4,2,0,20,21,5,1,0,0,21,23,3,4,2,0,22,20,1,0,0,0,23,26,1,
		0,0,0,24,22,1,0,0,0,24,25,1,0,0,0,25,27,1,0,0,0,26,24,1,0,0,0,27,28,5,
		4,0,0,28,32,1,0,0,0,29,30,5,3,0,0,30,32,5,4,0,0,31,18,1,0,0,0,31,29,1,
		0,0,0,32,3,1,0,0,0,33,37,5,10,0,0,34,36,5,19,0,0,35,34,1,0,0,0,36,39,1,
		0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,37,1,0,0,0,40,41,5,
		13,0,0,41,42,5,2,0,0,42,62,3,8,4,0,43,44,5,10,0,0,44,45,5,14,0,0,45,46,
		5,13,0,0,46,47,5,2,0,0,47,48,5,10,0,0,48,49,3,12,6,0,49,50,5,13,0,0,50,
		62,1,0,0,0,51,52,5,10,0,0,52,53,5,14,0,0,53,54,5,13,0,0,54,55,5,2,0,0,
		55,62,3,8,4,0,56,57,5,10,0,0,57,58,5,15,0,0,58,59,5,13,0,0,59,60,5,2,0,
		0,60,62,3,14,7,0,61,33,1,0,0,0,61,43,1,0,0,0,61,51,1,0,0,0,61,56,1,0,0,
		0,62,5,1,0,0,0,63,64,5,5,0,0,64,69,3,8,4,0,65,66,5,1,0,0,66,68,3,8,4,0,
		67,65,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,
		71,69,1,0,0,0,72,73,5,6,0,0,73,77,1,0,0,0,74,75,5,5,0,0,75,77,5,6,0,0,
		76,63,1,0,0,0,76,74,1,0,0,0,77,7,1,0,0,0,78,79,5,10,0,0,79,83,3,10,5,0,
		80,82,3,10,5,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,
		84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,13,0,0,87,107,1,0,0,0,88,89,5,10,0,
		0,89,90,3,12,6,0,90,91,5,13,0,0,91,107,1,0,0,0,92,96,5,10,0,0,93,95,5,
		19,0,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,
		0,0,0,98,96,1,0,0,0,99,107,5,13,0,0,100,107,5,11,0,0,101,107,3,2,1,0,102,
		107,3,6,3,0,103,107,5,7,0,0,104,107,5,8,0,0,105,107,5,9,0,0,106,78,1,0,
		0,0,106,88,1,0,0,0,106,92,1,0,0,0,106,100,1,0,0,0,106,101,1,0,0,0,106,
		102,1,0,0,0,106,103,1,0,0,0,106,104,1,0,0,0,106,105,1,0,0,0,107,9,1,0,
		0,0,108,110,5,19,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,
		112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,118,5,17,0,0,115,117,5,
		19,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,
		119,11,1,0,0,0,120,118,1,0,0,0,121,122,5,18,0,0,122,13,1,0,0,0,123,124,
		5,10,0,0,124,125,5,17,0,0,125,126,5,13,0,0,126,15,1,0,0,0,11,24,31,37,
		61,69,76,83,96,106,111,118
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
