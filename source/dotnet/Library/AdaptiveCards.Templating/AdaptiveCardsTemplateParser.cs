//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdaptiveCardsTemplateParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class AdaptiveCardsTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TEMPLATELITERAL=1, COMMA=2, COLON=3, LCB=4, RCB=5, LSB=6, RSB=7, TRUE=8, 
		FALSE=9, NULL=10, StringDeclOpen=11, NUMBER=12, WS=13, CLOSE=14, TEMPLATEDATA=15, 
		TEMPLATEWHEN=16, STRING=17, SINGLE=18, DOUBLE=19, TSTM=20, TemplateStart=21;
	public const int
		RULE_json = 0, RULE_obj = 1, RULE_pair = 2, RULE_array = 3, RULE_value = 4, 
		RULE_templateString = 5, RULE_templateExpression = 6;
	public static readonly string[] ruleNames = {
		"json", "obj", "pair", "array", "value", "templateString", "templateExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "','", "':'", "'{'", "'}'", "'['", "']'", "'true'", "'false'", 
		"'null'", null, null, null, null, "'$data'", "'$when'", null, null, null, 
		null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TEMPLATELITERAL", "COMMA", "COLON", "LCB", "RCB", "LSB", "RSB", 
		"TRUE", "FALSE", "NULL", "StringDeclOpen", "NUMBER", "WS", "CLOSE", "TEMPLATEDATA", 
		"TEMPLATEWHEN", "STRING", "SINGLE", "DOUBLE", "TSTM", "TemplateStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdaptiveCardsTemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AdaptiveCardsTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AdaptiveCardsTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AdaptiveCardsTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class JsonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(AdaptiveCardsTemplateParser.LCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(AdaptiveCardsTemplateParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AdaptiveCardsTemplateParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AdaptiveCardsTemplateParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 29;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16;
				Match(LCB);
				State = 17;
				pair();
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 18;
					Match(COMMA);
					State = 19;
					pair();
					}
					}
					State = 24;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 25;
				Match(RCB);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27;
				Match(LCB);
				State = 28;
				Match(RCB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
	 
		public PairContext() { }
		public virtual void CopyFrom(PairContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateWhenContext : PairContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATEWHEN() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATEWHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AdaptiveCardsTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateExpressionContext templateExpression() {
			return GetRuleContext<TemplateExpressionContext>(0);
		}
		public TemplateWhenContext(PairContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateWhen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonPairContext : PairContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AdaptiveCardsTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AdaptiveCardsTemplateParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AdaptiveCardsTemplateParser.STRING, i);
		}
		public JsonPairContext(PairContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPair(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TemplateDataContext : PairContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATEDATA() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATEDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AdaptiveCardsTemplateParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public TemplateDataContext(PairContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		int _la;
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new JsonPairContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 31;
				Match(StringDeclOpen);
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING) {
					{
					{
					State = 32;
					Match(STRING);
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 38;
				Match(CLOSE);
				State = 39;
				Match(COLON);
				State = 40;
				value();
				}
				break;
			case 2:
				_localctx = new TemplateDataContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				Match(StringDeclOpen);
				State = 42;
				Match(TEMPLATEDATA);
				State = 43;
				Match(CLOSE);
				State = 44;
				Match(COLON);
				State = 45;
				value();
				}
				break;
			case 3:
				_localctx = new TemplateWhenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 46;
				Match(StringDeclOpen);
				State = 47;
				Match(TEMPLATEWHEN);
				State = 48;
				Match(CLOSE);
				State = 49;
				Match(COLON);
				State = 50;
				templateExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSB() { return GetToken(AdaptiveCardsTemplateParser.LSB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSB() { return GetToken(AdaptiveCardsTemplateParser.RSB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AdaptiveCardsTemplateParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AdaptiveCardsTemplateParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 6, RULE_array);
		int _la;
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				Match(LSB);
				State = 54;
				value();
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 55;
					Match(COMMA);
					State = 56;
					value();
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 62;
				Match(RSB);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				Match(LSB);
				State = 65;
				Match(RSB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueObjectContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ValueObjectContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNullContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(AdaptiveCardsTemplateParser.NULL, 0); }
		public ValueNullContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTemplateStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringContext[] templateString() {
			return GetRuleContexts<TemplateStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringContext templateString(int i) {
			return GetRuleContext<TemplateStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		public ValueTemplateStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AdaptiveCardsTemplateParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(AdaptiveCardsTemplateParser.TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(AdaptiveCardsTemplateParser.FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AdaptiveCardsTemplateParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AdaptiveCardsTemplateParser.STRING, i);
		}
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueArrayContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueArrayContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		int _la;
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new ValueTemplateStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				Match(StringDeclOpen);
				State = 69;
				templateString();
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TEMPLATELITERAL || _la==STRING) {
					{
					{
					State = 70;
					templateString();
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 76;
				Match(CLOSE);
				}
				break;
			case 2:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(StringDeclOpen);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING) {
					{
					{
					State = 79;
					Match(STRING);
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85;
				Match(CLOSE);
				}
				break;
			case 3:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				Match(NUMBER);
				}
				break;
			case 4:
				_localctx = new ValueObjectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				obj();
				}
				break;
			case 5:
				_localctx = new ValueArrayContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 88;
				array();
				}
				break;
			case 6:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 89;
				Match(TRUE);
				}
				break;
			case 7:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 90;
				Match(FALSE);
				}
				break;
			case 8:
				_localctx = new ValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 91;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringContext : ParserRuleContext {
		public TemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateString; } }
	 
		public TemplateStringContext() { }
		public virtual void CopyFrom(TemplateStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplatedStringContext : TemplateStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATELITERAL() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATELITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(AdaptiveCardsTemplateParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(AdaptiveCardsTemplateParser.STRING, i);
		}
		public TemplatedStringContext(TemplateStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringContext templateString() {
		TemplateStringContext _localctx = new TemplateStringContext(Context, State);
		EnterRule(_localctx, 10, RULE_templateString);
		int _la;
		try {
			int _alt;
			_localctx = new TemplatedStringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING) {
				{
				{
				State = 94;
				Match(STRING);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100;
			Match(TEMPLATELITERAL);
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 101;
					Match(STRING);
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateExpressionContext : ParserRuleContext {
		public TemplateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateExpression; } }
	 
		public TemplateExpressionContext() { }
		public virtual void CopyFrom(TemplateExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueTemplateExpressionContext : TemplateExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringDeclOpen() { return GetToken(AdaptiveCardsTemplateParser.StringDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATELITERAL() { return GetToken(AdaptiveCardsTemplateParser.TEMPLATELITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(AdaptiveCardsTemplateParser.CLOSE, 0); }
		public ValueTemplateExpressionContext(TemplateExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplateParserVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTemplateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateExpressionContext templateExpression() {
		TemplateExpressionContext _localctx = new TemplateExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_templateExpression);
		try {
			_localctx = new ValueTemplateExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(StringDeclOpen);
			State = 108;
			Match(TEMPLATELITERAL);
			State = 109;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,21,112,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,1,1,1,1,1,1,1,1,5,1,21,8,1,10,1,12,1,24,9,1,1,1,1,1,1,1,1,1,3,1,30,
		8,1,1,2,1,2,5,2,34,8,2,10,2,12,2,37,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,3,2,52,8,2,1,3,1,3,1,3,1,3,5,3,58,8,3,10,3,12,3,
		61,9,3,1,3,1,3,1,3,1,3,3,3,67,8,3,1,4,1,4,1,4,5,4,72,8,4,10,4,12,4,75,
		9,4,1,4,1,4,1,4,1,4,5,4,81,8,4,10,4,12,4,84,9,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,3,4,93,8,4,1,5,5,5,96,8,5,10,5,12,5,99,9,5,1,5,1,5,5,5,103,8,5,10,
		5,12,5,106,9,5,1,6,1,6,1,6,1,6,1,6,0,0,7,0,2,4,6,8,10,12,0,0,122,0,14,
		1,0,0,0,2,29,1,0,0,0,4,51,1,0,0,0,6,66,1,0,0,0,8,92,1,0,0,0,10,97,1,0,
		0,0,12,107,1,0,0,0,14,15,3,8,4,0,15,1,1,0,0,0,16,17,5,4,0,0,17,22,3,4,
		2,0,18,19,5,2,0,0,19,21,3,4,2,0,20,18,1,0,0,0,21,24,1,0,0,0,22,20,1,0,
		0,0,22,23,1,0,0,0,23,25,1,0,0,0,24,22,1,0,0,0,25,26,5,5,0,0,26,30,1,0,
		0,0,27,28,5,4,0,0,28,30,5,5,0,0,29,16,1,0,0,0,29,27,1,0,0,0,30,3,1,0,0,
		0,31,35,5,11,0,0,32,34,5,17,0,0,33,32,1,0,0,0,34,37,1,0,0,0,35,33,1,0,
		0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,0,0,38,39,5,14,0,0,39,40,5,3,
		0,0,40,52,3,8,4,0,41,42,5,11,0,0,42,43,5,15,0,0,43,44,5,14,0,0,44,45,5,
		3,0,0,45,52,3,8,4,0,46,47,5,11,0,0,47,48,5,16,0,0,48,49,5,14,0,0,49,50,
		5,3,0,0,50,52,3,12,6,0,51,31,1,0,0,0,51,41,1,0,0,0,51,46,1,0,0,0,52,5,
		1,0,0,0,53,54,5,6,0,0,54,59,3,8,4,0,55,56,5,2,0,0,56,58,3,8,4,0,57,55,
		1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,
		1,0,0,0,62,63,5,7,0,0,63,67,1,0,0,0,64,65,5,6,0,0,65,67,5,7,0,0,66,53,
		1,0,0,0,66,64,1,0,0,0,67,7,1,0,0,0,68,69,5,11,0,0,69,73,3,10,5,0,70,72,
		3,10,5,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,
		1,0,0,0,75,73,1,0,0,0,76,77,5,14,0,0,77,93,1,0,0,0,78,82,5,11,0,0,79,81,
		5,17,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,
		1,0,0,0,84,82,1,0,0,0,85,93,5,14,0,0,86,93,5,12,0,0,87,93,3,2,1,0,88,93,
		3,6,3,0,89,93,5,8,0,0,90,93,5,9,0,0,91,93,5,10,0,0,92,68,1,0,0,0,92,78,
		1,0,0,0,92,86,1,0,0,0,92,87,1,0,0,0,92,88,1,0,0,0,92,89,1,0,0,0,92,90,
		1,0,0,0,92,91,1,0,0,0,93,9,1,0,0,0,94,96,5,17,0,0,95,94,1,0,0,0,96,99,
		1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,97,1,0,0,0,100,104,
		5,1,0,0,101,103,5,17,0,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,
		0,104,105,1,0,0,0,105,11,1,0,0,0,106,104,1,0,0,0,107,108,5,11,0,0,108,
		109,5,1,0,0,109,110,5,14,0,0,110,13,1,0,0,0,11,22,29,35,51,59,66,73,82,
		92,97,104
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
