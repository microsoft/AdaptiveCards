//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdaptiveCardsTemplateParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IAdaptiveCardsTemplateParserVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class AdaptiveCardsTemplateParserBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IAdaptiveCardsTemplateParserVisitor<Result> {
    /// <summary>
    /// Visit a parse tree produced by <see cref="AdaptiveCardsTemplateParser.json"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitJson([NotNull] AdaptiveCardsTemplateParser.JsonContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="AdaptiveCardsTemplateParser.obj"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitObj([NotNull] AdaptiveCardsTemplateParser.ObjContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>jsonPair</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.pair"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitJsonPair([NotNull] AdaptiveCardsTemplateParser.JsonPairContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>templateRootData</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.pair"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTemplateRootData([NotNull] AdaptiveCardsTemplateParser.TemplateRootDataContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>templateData</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.pair"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTemplateData([NotNull] AdaptiveCardsTemplateParser.TemplateDataContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>templateWhen</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.pair"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTemplateWhen([NotNull] AdaptiveCardsTemplateParser.TemplateWhenContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="AdaptiveCardsTemplateParser.array"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitArray([NotNull] AdaptiveCardsTemplateParser.ArrayContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueTemplateString</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueTemplateString([NotNull] AdaptiveCardsTemplateParser.ValueTemplateStringContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueTemplateStringWithRoot</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueTemplateStringWithRoot([NotNull] AdaptiveCardsTemplateParser.ValueTemplateStringWithRootContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueString</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueString([NotNull] AdaptiveCardsTemplateParser.ValueStringContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueNumber</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueNumber([NotNull] AdaptiveCardsTemplateParser.ValueNumberContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueObject</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueObject([NotNull] AdaptiveCardsTemplateParser.ValueObjectContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueArray</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueArray([NotNull] AdaptiveCardsTemplateParser.ValueArrayContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueTrue</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueTrue([NotNull] AdaptiveCardsTemplateParser.ValueTrueContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueFalse</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueFalse([NotNull] AdaptiveCardsTemplateParser.ValueFalseContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueNull</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.value"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueNull([NotNull] AdaptiveCardsTemplateParser.ValueNullContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>templatedString</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.templateString"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTemplatedString([NotNull] AdaptiveCardsTemplateParser.TemplatedStringContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>templateStringWithRoot</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.templateRoot"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTemplateStringWithRoot([NotNull] AdaptiveCardsTemplateParser.TemplateStringWithRootContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>valueTemplateExpression</c>
    /// labeled alternative in <see cref="AdaptiveCardsTemplateParser.templateExpression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitValueTemplateExpression([NotNull] AdaptiveCardsTemplateParser.ValueTemplateExpressionContext context) { return VisitChildren(context); }
}
